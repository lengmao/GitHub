配置网络：
	vi /etc/sysconfig/network-scripts/ifcfg-nesxx
修改主机名称：
	vi /etc/sysconfig/network
关闭防火墙
	chkconfig iptables off
克隆机器修改文件
	1、修改ip
	2、修改主机名称
	3、修改etc/hosts文件，使用名称映射IP
	
windows的host文件位置
	C:\Windows\System32\drivers\etc
	
统计某文件下各文件的大小
	cd /目录 
	du -sh ./*    查看此目录下所有文件的大小
	
创建删除拷贝链接元数据
	mkdir -p ./a/b/c   mkdir ./a/{b,c}
	cp ./a/b  ./d/f    cp ./a/{b,c} ./d/f
	rm -| rm -r d | rm -rf d
	ln ./a ./b | ln  -s ./a ./b
	stat file

linux查看文件内容
	cat [file] 显示文件所有内容，显示完退回bash
	more [file] 首先显示一个屏的内容，按空格陆续显示
	less  [file] 首先显示一个屏的内容，按空格陆续显示，按B可查看上面内容
	head -[rows] [file] 显示文件的头几行
  	tail -[rows] [file] 显示文件的后几行，默认是10行
	|  管道符 
	tail -f [file.log] 动态日志打印
	
vim命令
	vim +[第几行] 定位到第几行
	vim + 打开文本最好一行
	vim +/[需要查找的字符] 打开文件中匹配到字符的位置
	i 进入编辑模式
	a 定位到当前光标的下一个位置编辑
	dd 删除一行
	u 撤销前一步删除操作
	o 在光标所在行的下方新增一行，转换为输入模式
	O 在光标所在行的上方新增一行，转换为输入模式
	I 在当前光标行的行首，转换为输入模式
	A 在当前光标行的行尾，转换为输入模式

光标移动
	字符：
	h[左]  j[下]   k[上]  l[右]
	
	单词：
	w 至下一个单词的首词
	e 至当前或下一个单词的词尾
	b 至当前或前一个单词的词首
	
	行内：
	0 绝对行首
	^ 首行的第一个非空白字符
	$ 绝对行尾
	
	行间：
	G 文章末尾
	3G 第三行
	gg 文章开头
	
	翻屏：
	ctrl：f 、b

编辑模式
	删除&替换单个字符
		x 删除光标位置字符
		3x 删除光标开始三个字符
		r 替换光标位置字符
	
	删除命令：d
		dw 删除一个单词
		dd 删除一行(数字+dd删除几行)
		dG 光标位置开始删除到末尾
	复制粘贴&剪切
		yw 复制单词（2yw 复制从光标开始到后2个单词）
		yy 复制一行，P或p进行粘贴
		p 先删再剪切（3dd删除三行，p将删除的内容粘贴到当前光标的下一行）
		P 先删再剪切（3dd删除三行，P将删除的内容粘贴到当前光标的上一行）
	撤销操作
		u 撤销操作
		ctrl + r 重做撤销操作
		. 重复上一步的操作

末行模式：
	set:设置
		set nu 设置行号
		set nonu  取消行号
		set readonly 设置只读
	
	查找
		:/word 或 /word（前者定位到单词所在的行首，后者定位到单词）
		n 查找向下翻  
		N 查找向上翻
		! 后可跟命令，相当于吧vi最小化
	
	查找并替换
		1,$s/after/befor/gi(1,$：从第一行开始到末尾行；s：查找命令；///：中间两个单词，分别为替换前和替换后单词；g：全局替换，主要针对一行有两个相同的单词，不用g只替换前一个；i：忽略大小写)
		
		1,n s/after/befor/gi
		.,+3 s/after/befor/gi (光标位置向下加3行，后可接d，s等操作命令)
		%s/after/befor/gi （全文查找）
		
正则表达式
	匹配操作符：
		/ 转义字符
		. 匹配任意单个字符
		[1249a],[^12],[a-k] 字符序列单字符占位
		^ 行首
		% 行尾
		\<,\> :\<abc 单词首尾边界
		| 连接操作符
		(,) 选择操作符
		\n 反向引用
	
	重复操作符：
		? 匹配0到1次 linux中使用时 转义\?
		* 匹配0到多次   
		+ 匹配1到多次   \+
		{n} 匹配n次   \{,\}
		{n,} 匹配n到多次  \(,\)  \|
		{n,m} 匹配n到m次

cut显示切割的行数据	cut -d '' -s -d1,3 file.txt(显示以''为分隔符的第一列和第三列，并且不显示没有分隔符的列)
	-f 选择显示的列  
	-s 不显示没有分隔符的行
	-d 自定义分隔符

sort排序文件的行 sort -t' ' -k2 -nr sort.txt(-t:安装分隔符' ',-n：使用数字并按倒序,-k2:按第二列排序)
	-n 按数值排序
	-r 倒序
	-t 自定义分隔符
	-k 选择排序列
wc ：word count
	wc -l file 文件的行数
	man wc 可看wc命令的用法
sed：行编辑器
	命令格式 sed [options] 'AddressCommand' file
	
	-n 静默模式，不在默认显示模式空间中的内容
	-i 直接修改原文件
	-e SCRITP -e SCRIPT 可以同时执行多个脚本
	-f /PATH/TO/SED_SCRIPT
	-r   表示使用扩展正则表达式
	
	Command命令：
		d 删除符合条件的行 sed -i "2d" sed.txt 删除第二行
		p 显示符合条件的行
		a\String 在指定的行后面追加新行String类型 sed -i "1a\word" sed.txt 在第一行下面添加一行为word
		 \n 可以用于换行
		i 在指定内容前加一行String类型
		\str\ commamd 匹配指定字符的行 sed "\apple\d" sed.txt 删除匹配到apple这个单词的行
		s/pattern/string/修饰符  查找并替换(默认只替换每行中第一个被匹配到的字符串)
			g 行内全局替换
			i 忽略大小写
			s/// ：s###，s@@@  
			示例：sed "s@hello@nihao@" sed.txt 

awk命令
	示例：awk -F':' 'BEGIN{print "name" "\t" "shell"}{print $1 "\t"  $7} END{print "end"}' passwd
		-F':' 要切割的文件以":"为分隔符
		'{print $1 "\t" $7}' 打印文件中的第一列和第7列，中间用制表符分隔{....}相当于一个匿名方法
		BEGIN{} END{} 在输出开始和输出结束时执行的方法 匿名方法可有多个，BEGIN{}END{}方法只能有一个
	示例：awk -F':' '/root/{print $0}' passwd 
		/root/ 匹配到root关键字
		$0 打印匹配到root关键字的整行
	示例：awk -F':' '{ print NR "\t" NF"\t" $0}' passwd	
		NR 打印出行数
		NF 打印出这一行的列数
	示例：
		数据格式：
		Tom   0  2019-03-12  car    2800  
		vivi  1  2019-01-12  blike  1000  
		join  1  2019-01-12  car    2000  
		Tom   0  2019-01-12  blike  3000 
		join  1  2019-01-12  car    4000 
	awk '{split($3,data,"-"); if(data[2]=="01"){ name[$1]+=$5} }  END{for(i in name){print i "\t" name[i]}}' awk.txt
		统计出表中1月份每个人发的工资
	awk '{split($3,data,"-"); if(data[2]=="01"){ name[$1]+=$5} }  END{for(i in name){print i "\t" name[i]}}' awk.txt
		统计出表中1月份每个人发的工资，并将第二列为0的设置打印为管理员，为1的设置打印为员工
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	
	