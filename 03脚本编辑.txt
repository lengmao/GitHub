linux执行脚本文件
	1、source file.txt
	2、. file.txt
	3、bash file.txt
	4、在file.txt中开头加#!/bin/bash; 赋执行的权限 chmod +x file.txt; 在当前文件下执行./file.txt
	
	
重定向
	输出：
		示例 ls -l / 1> ls.txt  将ls -l命令的输出重定向输出到ls.txt文件中  1>:将标准输出流定向到，后一次会覆盖前一次的输出
		示例 ls -l / 1>> ls.txt  后一次会追加到前一次重定向的后面
		示例 ls -l / /god  1>ls.txt 2>& 1   
			1:标准输出符 2：错误输出符
			/：根目录  /god 没有这个目录，单独执行ls -l /god会报错
			先让标准输出指向ls.txt文件，然后将错误输出指向1(标准输出)
		示例 ls -l / /god >& ls.txt 将标准输出和错误输出到一个文件 >&还可以写成&>
	
	输入：
		示例：read  sxt 0<<OOXX  read对换行符敏感
	
	请求百度：
		exec 8<> /dev/tcp/www.baidu.com/80 让bash发起了一个对百度的socket链接
		echo -e "GET / HTTP/1.0\n"  1>& 8 将echo的标准输出指定到前面创建的8号文件
		cat 0<& 8 将8号文件的输出输入到cat

变量
	本地
		当前shell拥有
		生命周期随shell
		name=god
	局部
		只能local用于函数
		val=100
	位置
		$1,$2,${11}
		脚本
		函数
	特殊  
		$# 位置参数的个数
		$* 参数列表 双引号引用为一个字符串
		$@ 参数列表 双引号引用为一个单独的字符串
		$$ 当前shell的PID
		$? 上一个命令推出的状态 0：成功 other：失败 
		
表达式
	算术表达式 help let查看
		let C=$A+$B 第一种	
		C=$[$A+$B]  第二种:$[算术表达式]
		C=$(($A+$B)) 第三种：$((算术表达式)) 最常用 $可以不加
	
	条件表达式 help test
		test expression 第一种
		[ expression ] 第二种 最常用
		[[ expression ]] 第三种		
	脚本示例：添加用户的脚本(条件满足横向执行，不满足纵向执行)
		#!/bin/bash
		[! $# -eq 1 ] &> /dev/null  && echo "args error...." && exit 2   
		id $1 &> /dev/null  && echo "user already exist !" && exit 3
		useradd $1 && echo $1 | passwd --stdin $1  &> /dev/null && echo "user add successfully" && exit 
		echo "the option of adding a user is must by root!" && exit 9
	 	
	help 
		if 
		while : while COMMAND ;do COMMANDS  ;done    while当中的判断如果一直为真，就会死循环
		for  ： for i in WORDS ; do COMMANDS; done
				for i in `COMMANDS RESULT` do COMMANDS; done
		
		
	脚本示例：找出给定路径下的最大文件
		#!/bin/bash
		//替换linux下的切割符为\n(默认用空格分割)，一般有空格、制表符(\t)、换行符(\n)
		oldIFS=$IFS   
		IFS=$'\n' 
		
		//注释 du -a $1 | sort -nr 将指定路径下的文件按照数字倒序排列；注意要用`命令`的形式  
		for i in `du -a $1 | sort -nr`;do     
				echo $i
				//打印每一行的第二列赋值变量fileName
				fileName=`echo $i | awk '{print $2}'`
				
				//判断fileName是不是一个文件 -f
				if [ -f $fileName ] ; then
						echo $fileName
						exit 0
				fi
		done
		//执行完操作将分割付恢复成默认的
		IFS=$oldIFS

命令扩展：
	1、花括号 mkdir -p fds/{a , b ,c }scd
	2、波浪线 cd ~god  表示家目录
	3、变量&参数 $ $$ ${}(.....)
	4、命令替换 ls -l ` echo $PATH `
	5、算数扩展 num = $((3+4))
	6、word拆分 $IFS
	
		
		